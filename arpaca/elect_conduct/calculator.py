import os
import sys
import subprocess
import shutil
import numpy as np
from distutils.dir_util import copy_tree
from arpaca.einstein.file_manager import getMDset  ## dependent to einstein; just hardcopy?
from arpaca.amorphous import genInput 


class GenRelaxInput(genInput):  # wiil be used in GetKGSet.
    """
    class inherited from arpaca.amorphous.genInput.
    modified write_incar for relaxation run.
    everything else remain same.
    PLEASE CHECK self.nsw VALUE. the original genInput has default of 10000 (MD run)
    """
    def write_incar(self):
        system = ''
        for name, num in zip(self.atom_name, self.atom_num):
            system += name+str(num)

        with open("./INCAR",'w') as f:
            f.write(f"SYSTEM = {system}\n")
            f.write(f"NCORE = {self.ncore}\n")
            f.write('\n')
            f.write('# electronic degrees\n')
            f.write(f"ENCUT = {np.max(self.enmax)}\n")
            f.write("LREAL = Auto\n")
            f.write("PREC  = Normal\n")
            f.write("EDIFF = 1E-5\n")
            f.write("ISMEAR = 0\n")
            f.write("SIGMA = 0.01\n")
            f.write("ALGO = Fast\n")
            f.write("MAXMIX = 40\n")
            f.write("ISYM = 0\n")
            f.write("NELMIN = 4\n")
            f.write('\n')
            f.write('# ionic degrees\n')
            f.write('IBRION = 2\n') # ionic relaxation
            f.write(f"NSW = {self.nsw}\n")
#            f.write(f"POTIM = {self.potim}\n") # do not need potim when IBRION=2
            f.write("ISIF = 2\n") # cell volume or shape not changing
            f.write("EDIFFG = -0.02\n") # break condition for the ionic relaxation loop
            f.write("LCHARG = .FALSE.\n")
            f.write("LWAVE = .FALSE.\n")
            f.write('\n')
            f.write('# charge state\n')
            f.write("NELECT = %.3f"%self.nelect)

            ## other inputs - genWaveInput, genNablaInput in separate classes?? idk


class GetKGSet(getMDset):
    """
    class inherited from arpaca.einstein.file_manager.getMDset.
    modified __init__, maintained make_folder, new make_KG_set.
    """
    def __init__(self,
                 path_poscar,
                 temp,
                 label=None,
                 potcar='pbe',
                 nsw=500,
                 charge=0,
                 ncore=4):  # copied from arpaca/einstein/file_manager.py
        """
        Arg 1: (str) path_poscar; path of directory containing poscar files
        Arg 2: (list) temp; temperature in K 
        Arg 3: (list; opt) label; labels of poscar. poscar format should be POSCAR_{label}
        """
        self.path_poscar = path_poscar
        self.label = label
        self.temp = temp
        self.potcar = potcar
        self.nsw = nsw
        self.charge = charge
        self.ncore = ncore

        ## from ensembles, make list of ensemble directories.
        ## the self.temp/self.label directories will be generated by makeFolder (inherited)
        if self.label is None:
            self.label = []
            path_now = os.getcwd()
            for name in os.listdir(self.path_poscar):
                if len(name.split('_')) == 2:
                    poscar, label = name.split('_')
                    if poscar=='POSCAR':
                        self.label += [label]
        
        self.foldername=[]
        self.make_KG_set()

    def make_KG_set(self, wave_name='1_wave', nabla_name='2_nabla', cond_name='3_cond'):
        path_now = os.getcwd()
        self.wave_name = wave_name
        self.nabla_name = nabla_name
        self.cond_name = cond_name

        def replace_text(file_path, old_str, new_str): # from https://toramko.tistory.com/
            # open file
            fr = open(file_path, 'r')
            lines = fr.readlines()
            fr.close()
            # old_str to new_str
            fw = open(file_path, 'w')
            for line in lines:
                fw.write(line.replace(old_str, new_str))
            fw.close()


        for t in self.temp:
            outer_folder = f"{t}K"
            for l in self.label:
                # make folder
                path_dir = os.path.join(outer_folder, f"{l}")
                self.foldername += [path_dir]
                os.makedirs(path_dir, exist_ok=True)
                
                # copy poscar
                from_pos_path = os.path.join(self.path_poscar, f"POSCAR_{l}")
                to_pos_path = os.path.join(path_dir, 'POSCAR')
                shutil.copyfile(from_pos_path, to_pos_path)
                
                # make input files
                os.chdir(path_dir)
                _ = GenRelaxInput(potcar=self.potcar,  ## changed here
                             nsw=self.nsw, ## ionic relaxation
                             potim=None,
                             temp=t,
                             charge=self.charge,
                             ncore=self.ncore)


                ## ready to make subfolders..
                def make_preset(path_name):
                    os.makedirs(path_name, exist_ok=True)
                    #shutil.copyfile('CONTCAR', os.path.join(os.getcwd(), path_name, 'POSCAR')) ## should copy contcar after relax
                    shutil.copyfile('INCAR', os.path.join(os.getcwd(), path_name, 'INCAR'))
                    shutil.copyfile('KPOINTS', os.path.join(os.getcwd(), path_name, 'KPOINTS'))
                    shutil.copyfile('POTCAR', os.path.join(os.getcwd(), path_name, 'POTCAR'))

                # make 1_wave folder
                make_preset(self.wave_name)
                boltzmann = 8.61733326e-05
                kT = boltzmann * self.temp
                wave_incar = os.path.join(os.getcwd(), self.wave_name, 'INCAR')
                replace_text(wave_incar, "LWAVE = .FALSE.", "LWAVE = .TRUE.")
                replace_text(wave_incar, f"NSW = {self.nsw}", "NSW = 0")
                replace_text(wave_incar, "ISMEAR = 0", "ISMEAR = -1")
                replace_text(wave_incar, "SIGMA = 0.01", f"SIGMA = {kT}")


                # make 2_nabla folder
                make_preset(self.nabla_name)
                wave_nabla = os.path.join(os.getcwd(), self.nabla_name, 'INCAR')
                replace_text(wave_nabla, f"NSW = {self.nsw}", "NSW = 0")
                replace_text(wave_nabla, "ISMEAR = 0", "ISMEAR = -1")
                replace_text(wave_nabla, "SIGMA = 0.01", f"SIGMA = {kT}")
                replace_text(wave_nabla, "NELMIN = 4", "")
                with open(wave_nabla, 'a') as f:
                    f.write("\n# GreeKuP run\n")
                    f.write("LOPTICS = .TRUE.\n")
                    f.write("NELM = 0")

                # make 3_cond folder
                omega_path = os.path.join(os.path.dirname(__file__), '../data/conductivity_greekup') 
                copy_tree(omega_path, self.cond_name)

                # return to current path
                os.chdir(path_now)


class KGCalcStep:
    """
    doing things after each VASP or GreeKuP run.
    example usage:
    KGCalcStep(1, ['300K', '400K'], [10000, 10500, 11000])
    """
    def __init__(self, step, temp_list=None, snap_list=None, check_cond = '1_wave'):
        """
        Arg 1: (GetKGSet) kg_set; need to get directory list.. 
        """
        self.step = step
        self.temp_list = temp_list
        self.snap_list = snap_list

        self.check_cond = check_cond
        self.cwd = os.getcwd()

        self.data_dir = os.path.join(os.path.dirname(os.path.abspath(__file__), "data"))

        if temp_list == None and snap_list == None:
            self.list_dir()
        else:
            self.dir_list_slim = []
            for temp in temp_list:
                for snap in snap_list:
                    slim = os.path.join(str(temp), str(snap))
                    if os.path.exists(os.path.join(slim, self.check_cond)):
                        self.dir_list_slim.append(slim)


        self.select_option()


    def select_option(self):
        option_list = {
            0: self.after_relax,
            'relax': self.after_relax,
            1: self.after_wave,
            'wave': self.after_wave,
            2: self.after_nabla,
            'nabla': self.after_nabla,
            3: self.after_cond,
            'cond': self.after_cond
            9: self.clean_large_file,
            'clean': self.clean_large_file
        }
        return option_list.get(self.step, lambda: "invalid option")()


    def after_relax(self):
        """
        step == 0 or relax
        copy contcar to poscar in every subfolders.
        """
        print('after relax')
        for dirs in self.dir_list_slim:
            file_from = os.path.join(dirs, 'CONTCAR')
            file_to1 = os.path.join(dirs, '1_wave', 'POSCAR')
            file_to2 = os.path.join(dirs, '2_nabla', 'POSCAR')
            if os.path.isfile(file_from):
                shutil.copy(file_from, file_to1)
                shutil.copy(file_from, file_to2)
                print('copied', file_from, 'to 1_wave/POSCAR and 2_nabla/POSCAR.')

    def after_wave(self):
        """
        step == 1 or wave
        move wavecar to 2_nabla.
        """
        print('after wave')
        for dirs in self.dir_list_slim:
            file_from = os.path.join(dirs, '1_wave', 'WAVECAR')
            file_to = os.path.join(dirs, '2_nabla', 'WAVECAR')
            if os.path.isfile(file_from):
                shutil.copy(file_from, file_to)
                print('moved', file_from, 'to 2_nabla/WAVECAR.')

    def after_nabla(self):
        """
        step == 2 or nabla
        move opticfull to 3_cond.
        """
        print('after nabla')
        for dirs in self.dir_list_slim:
            file_from = os.path.join(dirs, '2_nabla', 'OPTICFULL')
            file_to = os.path.join(dirs, '3_cond', 'OPTICFULL')
            if os.path.isfile(file_from):
                shutil.copy(file_from, file_to)
                print('moved', file_from, 'to 3_cond/OPTICFULL.')


    def after_cond(self):
        """
        step == 3 or cond
        run greekup script that calculates dc conductivity.
        """
        print('after cond')

        ## find greekup path from data/path.dat
        path_path = os.path.join(self.data_dir, 'path.dat')
        path_greekup = None
        with open(path_path, 'r') as file:
            for line in file:
                if "greekup=" in line:
                    path_greekup = line.split("=")[1]
        
        if path_greekup == None:
            print("please check arpaca/data/path.dat contains line with greekup=")
        else:
            path_dccalc = os.path.join(path_greekup, 'condcalc_c++', 'dccalc')
            if not os.path.isfile(path_dccalc):
                raise Exception("please check greekup program contains dccalc.")

            for dirs in self.dir_list_slim:
                file_recond = os.path.join(dirs, "3_cond", "ReCONDUCTIVITY")
                file_recond_dc = os.path.join(dirs, "3_cond", "ReCONDUCTIVITY_DC")
                if os.path.isfile(file_recond):
                    command = self.path_dccalc + "-input=ReCONDUCTIVITY -dc=ReCONDUCTIVITY_DC"

                    ##### run bash script
                    os.chdir(dirs)
                    subprocess.run(command, shell=True, capture_output=True, text=True)
                    os.chdir(self.cwd)

    def clean_large_file(self):
        """
        step == 9 or clean
        removes large files, such as:
        WAVECAR, WAVEDER, OPTIC, OPTICFULL
        only after all runs are done.
        (checked by ReCONDUCTIVITY_DCFORM exists.)
        """

    def list_dir(self):
        """
        Searches the 1_wave files and returns the list of paths.
        not directly called by user.
        """
        self.dir_list = []
        for root, dirs, files in os.walk(self.cwd):  ## doing in cwd; change if needed
            if self.check_cond in dirs:
                self.dir_list.append(root)
            # for dir_name in dirs:
            #     dir_path = os.path.join(root, dir_name)
            #     if self.check_cond in dir_path:
            #         self.dir_list.append(dir_path.replace(self.check_cond, ""))
        self.dir_list_slim = []
        for dir_long in self.dir_list:
            self.dir_list_slim.append(dir_long.replace(self.cwd, ""))


# kg_set = GetKGSet(path_poscar='ensembles', temp=np.arange(600, 700+1, 100)) # for testing
# KGCalcStep(kg_set, 0)


"""
user's todo
1. run base relaxation
2. copy CONTCAR to every subfolders - by calling ??? class.
3. run vasp at 1_wave
4. move 1_wave/WAVECAR to 2_nabla/
5. run vasp at 2_nabla WITH GREEKUP-RECOMPILED VASP and USE ONLY ONE CORE - please read GreeKuP page
6. move 2_nabla/OPTICFULL to 3_cond/
7. run GreeKuP at 3_cond
"""


## add BoltzTraP2?

## please add procedures that checks the folder existences.
## genrelaxinput - after getKGset?